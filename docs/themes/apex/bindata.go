// Code generated by go-bindata.
// sources:
// files/css/index.css
// files/js/index.js
// files/views/index.html
// DO NOT EDIT!

package apex

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5b\x6f\xe3\xb8\x15\x7e\xf7\xaf\x38\x70\xb0\xc0\xa4\xb5\x04\xc9\x89\x12\x47\x03\x0c\xba\x9d\x9d\x60\xfb\x30\xed\xa2\xe9\xa2\x7d\xa5\xa4\x63\x8b\x0d\x45\x0a\x24\x95\xd8\x53\xe4\xbf\x17\xbc\x48\x26\x6d\x39\xb3\xbb\xc8\x43\xec\xc3\x73\xe3\x77\xae\x74\x29\x85\xd0\xf0\xbf\x05\x40\x92\x20\x51\x58\x42\x3d\x54\xb4\x4e\x2a\xfc\x46\x51\x7e\x48\x37\xeb\x15\x64\x2b\x48\xf3\xf5\x0a\xf2\xeb\x8f\x96\xef\x95\x36\xba\x2d\x61\x93\x65\xfd\xde\x51\x5a\x24\x0d\xca\xa4\x45\xba\x6b\x75\x09\xb7\xee\xc4\x1e\x69\x49\xea\x67\xca\x77\x25\x64\x69\x56\x48\xec\x3e\x46\xe4\xa4\xc3\x86\x0e\x9d\x39\x9d\x39\x64\x44\xee\xd0\x9c\x6d\xec\x99\x3d\x6c\x88\x7c\x2e\xe1\x2a\xcb\x32\xc7\x5c\xb1\x01\x4b\xb8\xba\xb9\xf9\xf1\xe1\xf1\xd1\x91\x98\x71\x23\xd9\x49\x72\x28\xe1\x6a\x4b\xcc\x9f\x17\xae\x76\x86\xb2\xdd\x3a\xbe\xad\xf9\xb6\xb9\xdb\x7c\x79\xb8\x1b\x09\x49\x2d\x98\x90\x4e\x43\x09\x57\xc5\xba\x68\xee\x36\xd3\xa1\xb7\xbd\xce\xd7\xc5\xfa\xc1\x51\x77\x92\xf4\xc6\x7e\xb1\xbd\x69\xea\x5b\x6f\x46\x21\xc3\x5a\x53\xc1\xad\xc1\x17\x22\x3f\x38\x3f\x3d\x80\xc7\x63\xe3\xc1\x6b\x4b\x35\x7e\x5c\xbc\x2d\x16\x7f\xb2\x81\xa8\xc4\x3e\x51\xf4\x9b\xc5\xac\x12\xd2\x00\x5b\x89\xbd\x65\x68\x75\xc7\x56\x50\x89\xe6\x60\x39\xb7\x82\xeb\x64\x4b\x3a\xca\x0e\x25\x24\xa4\xef\x19\x26\xea\xa0\x34\x76\x2b\xf8\x2b\xa3\xfc\xf9\x2b\xa9\x9f\xec\xf7\x47\xc1\xf5\x6a\x01\x00\xb0\x7c\xc2\x9d\x40\xf8\xf5\x6f\xcb\x15\x2c\xff\x29\x2a\xa1\x85\xf9\xf4\x8f\xfd\x61\x87\x7c\xe9\x79\x7e\xad\x06\xae\x07\x43\xff\x4c\xb8\x26\x12\x19\x33\x5f\x1e\xa9\x24\xf0\x44\xb8\x1a\xf9\x7e\x92\x82\x36\x9e\x02\xcb\x9f\x91\xbd\xa0\xa6\x35\x81\xbf\xe3\x80\xcb\x15\x28\xc2\x55\xa2\x50\x52\x8b\xb7\xf5\x56\xd1\x6f\x58\x42\x5e\xb8\xcc\xb1\xa4\x57\x9f\x35\x37\x2e\xa2\x15\xa9\x9f\x77\x52\x0c\xbc\x99\x90\xdb\x59\xdc\x6c\x64\x46\x9a\x0f\x86\x3d\x60\x94\xe3\x94\x7b\xb9\xa1\x74\x44\xee\x28\x2f\xc1\x2a\xec\x49\xd3\xb8\x04\xb4\x18\x96\xe5\x04\xbf\x83\xfb\xcc\x5e\x18\xbd\x73\xcb\x61\xf0\xae\x5d\x54\xf2\x15\xb4\xeb\x15\xb4\x37\x2b\x68\x6f\xad\x52\xe7\x40\xa2\x45\x5f\xc2\xbd\xbf\xac\xa7\x55\x42\x6b\xd1\x79\xdf\x42\x4c\xd2\xb5\x2f\x80\x08\x95\x3b\x87\x4a\x7c\xc7\xa9\x56\x2e\x60\x62\x9d\x3a\x73\xe4\xdc\xa2\x53\xe3\xb8\xff\x0c\xfd\x31\xa9\x62\x86\x33\xf3\x77\x56\x88\x58\x7e\xef\x02\xe5\x2d\x4a\xaa\x0d\xb3\xc6\xbd\x4e\x1a\xac\x85\x24\x06\xa7\x12\xb8\xe0\x2e\xc1\xfb\xc0\xa7\x12\xd6\x45\xbf\x87\xb9\xdb\xdd\x17\x73\x77\x0b\x2a\xd3\x5d\x91\x51\x50\x5a\x0a\xbe\x5b\x2d\x7a\xff\x29\xf4\xe8\x3c\x51\x22\x60\x8b\x2c\x1b\xb5\x10\xa3\x80\xfc\x0e\xd9\xdb\x2c\xcc\xac\x29\xa4\x37\x2e\xd0\x53\xd1\x3a\x6a\xde\xef\xa1\x11\x5a\x63\x03\x57\x4d\xd3\x4c\x46\xcb\x56\xbc\xa0\xb4\xa6\xdd\xc7\x73\x07\xa6\x9e\x71\xa2\x32\x00\x34\x94\x8d\xb8\x92\x48\x93\xfd\xe2\x60\x1b\x58\x14\x85\x22\x33\x51\x70\xff\x6e\x7c\x47\x3f\x29\x99\x81\xc1\x89\x50\xee\x84\xf2\xa3\x90\x63\x63\x34\xd6\x3d\x06\xf8\xfd\x58\x9e\xa7\xb7\x4f\x4b\xa7\xf1\x9d\xd0\x8e\xd7\xba\x10\xdb\x5e\xe2\x85\x1a\x3f\x8e\x88\xf3\x0a\x9f\x62\x3e\xc1\x30\xe2\xe2\x01\x96\xa4\xa1\x83\x2a\x61\xed\xa8\x06\xff\x2d\x13\xaf\xc9\xbe\x04\x32\x68\x31\xba\x53\xc2\xf2\x49\x0c\xb2\x46\xf8\x2c\x1a\x84\x5f\xa4\xe9\xb4\x5f\x91\x33\xb1\x82\x4e\x70\xa1\x7a\x52\xe3\x49\x4d\xa6\x9b\xd9\x82\x2b\xfc\x68\x7c\xc5\xea\x99\xea\xc4\x09\x74\x42\xe8\xd6\xfa\x47\xb8\xa6\x84\x51\xa2\x70\x4a\xaf\x4f\x50\x8b\x06\x4d\x76\xb9\x4f\x41\x82\xb8\x94\x54\x82\xd1\x06\xae\x7e\xfa\xf2\x65\xfd\xe5\xee\xc4\x8b\x2c\xbd\x1f\x2b\xff\x88\x41\xbf\xb7\xf1\x9e\xc1\xc1\xe7\xbd\x1d\x64\x89\xbd\x95\x49\xd1\x57\x49\xfa\x4b\xed\x2c\x9a\x5c\x41\xeb\xf8\xad\x17\x6c\x50\x13\xca\x14\x7c\x02\x35\x74\x1d\x91\x6e\x1e\xd6\x83\x54\x26\x8c\xbd\xa0\x5c\xa3\xb4\xb1\x19\xb4\x81\x72\x2c\x19\x80\x41\xa1\xf4\x3d\x3c\xa8\xa3\xa3\xbe\x3e\xac\x24\x86\x5b\xed\x6e\xee\xd0\x72\xf9\x61\x47\x7e\x98\x20\x9e\xcf\x4d\xb5\xb7\xc5\x22\xfd\xb7\x24\x7d\xef\x8b\xb2\xa1\xaa\x67\x66\x13\xd9\x32\xb4\x30\xfd\x77\x50\x9a\x6e\x0f\x49\x2d\xb8\x46\x93\x25\x35\x3a\x6f\x8d\xe4\x67\xc1\x35\xa1\xdc\xcb\xfa\x4d\xcb\x99\xb5\x5f\xac\xd9\x33\x95\xe6\x7f\xd2\x50\xe9\x06\x53\x69\xd2\x79\xe8\xf8\x51\x23\x9a\x08\x5c\xf6\xc9\xb0\xfd\x6c\x57\xb8\xdf\xe9\x31\x00\x61\x74\xc7\x13\xaa\xb1\x53\x21\x79\xcc\x5c\xe7\x79\xb4\x1e\xba\x26\x94\x3e\xd1\x06\x2b\xe2\x0c\x1a\x3b\x25\xe4\x90\xfb\xf2\x09\xdc\x0e\x61\xb8\x2f\x7e\x88\xcf\x68\xb7\xf3\xed\x66\x3f\x2e\xa5\x79\x96\x79\xa6\xaf\xc8\x07\x7b\xda\x0b\x45\x1d\x2c\x63\x76\x29\x4d\xeb\xe7\xc3\xc7\xe8\xec\x48\xb3\xb3\xb2\xf0\x99\x7e\x71\x1e\xfc\xd6\x4c\x75\x7e\x7c\x82\xd4\x60\xe4\xfc\x39\x99\x1a\xc7\xb4\x89\x58\x3f\xf9\x89\x74\x74\x51\x22\x23\x9a\xbe\x5c\x4a\xe3\xf9\x19\xa5\x25\xe1\xa3\x02\x7b\x19\x58\x67\x59\xa7\x66\xee\x76\x3d\xef\x44\x4a\x6a\x63\xf4\xbd\xe9\x38\x27\x56\x56\xb8\x15\x72\x14\xf3\x79\xb3\x5c\xc6\xa0\x93\x4a\x09\x36\x68\xeb\x7c\x14\xc0\x63\x06\xe5\x63\xc7\x71\x60\x25\x7e\x99\x72\x15\x77\xb2\x30\x26\x17\xa3\xf5\x42\x15\xad\x28\xa3\xfa\x50\x42\x4b\x9b\x06\xf9\x84\xcd\x56\xc8\xae\x04\x55\x13\x86\xff\xf9\x90\x5d\x47\xf4\x44\x48\x6a\x07\x99\x31\x17\xa4\x77\x08\x2a\x61\x0c\xd6\x45\xd6\x29\x6f\xd6\xbc\xa2\x2e\x61\x72\x61\xcc\x7f\x07\x49\x2b\x15\xe2\x19\xde\xc6\x7e\x66\x38\x7f\x9d\xdc\xab\xfc\x85\xec\xf0\x6c\x1d\xcc\xb3\x78\xda\x27\x41\xe2\x8f\x42\xe5\x96\x4a\xa5\x93\xba\xa5\xac\x99\xdf\x27\x23\x61\x37\x75\xd3\x7f\x51\xcd\x70\x7e\x11\x88\xe6\xda\x3a\x5d\xfb\x41\xef\x44\x52\x87\x70\x68\xc8\xc5\x79\x9c\xaa\x9e\x28\x9d\xf8\x48\xb5\xfb\xa6\x6d\x44\x61\x0b\x0a\x9a\x42\x91\x4d\x97\x72\x76\x9c\x9e\xd0\xce\x98\x5f\x9b\x98\xd3\x0c\x98\x9e\xf0\xb8\x2d\x56\x4c\xd4\xcf\x21\x53\xaa\x86\xca\x38\x71\x79\x45\x09\x56\x9d\x68\xcc\x6e\xfc\x94\xb5\x57\x08\xe2\x37\x98\x56\x5d\x13\x85\x51\xbb\x9f\xc6\xd5\x68\x77\x32\xca\x50\x6b\xd3\x10\x7a\x52\xdb\x2e\xe4\xac\x8f\xef\xe8\xeb\xef\x9a\x88\x3a\x47\x25\x58\x73\xfa\x54\xb8\x8b\x01\x54\x9d\x49\xfb\xa3\xfd\x90\xf5\xd6\x65\xd5\xa9\xbd\xb1\x49\x9d\xba\xca\x85\xec\x08\x3b\xcf\x8d\xf1\x69\x92\xfe\xc8\xeb\x56\xc8\x77\x7a\x61\x94\x2a\xc9\x68\x5f\x18\x03\xa6\x42\xb2\x34\x2f\x22\x18\x29\xb7\x96\x7c\x18\x8f\x9d\xc7\x0b\x4e\x9d\xe7\x76\xbc\xb3\xf7\x40\xbd\xec\x4e\xbc\x08\xfb\x97\x4f\x4a\xdf\x9f\xc2\x72\x08\xc4\x7b\xa2\x5b\xaf\xc3\xae\x28\x09\xbe\x20\xd7\xca\x76\x91\x80\x37\x68\x14\xd3\x35\x72\xa7\xec\x51\x88\xb1\x44\x46\x47\x1f\xb2\xe8\x81\xf9\xc7\x4b\x26\xaa\xe5\xdb\x87\xe0\x8d\x7e\x9a\xaf\xdf\x7d\x9b\xa5\x5f\x51\xa9\xb8\xeb\x84\x0f\xbe\x69\xab\x5c\x7b\xbc\xc2\x0d\xfd\x0a\xef\xb7\x85\xfb\x8d\x66\x66\x61\xbd\xbf\xad\xb3\x6d\x7d\x79\x0b\xf5\xae\x5d\xe5\xf5\x3d\x36\x77\xb1\x33\xf1\xfb\xd3\x85\xe7\x2f\x1d\x36\x94\x80\xaa\x25\x22\x07\xc2\x1b\xf8\x10\xb4\x8e\x8d\xe9\x87\xd7\x0e\xee\xf8\xc7\x97\x99\xdf\xbd\x6e\xc6\x8e\x1a\xfd\x4a\xf6\x83\xa3\xcc\x94\xc8\xdb\x62\x01\x30\xbb\xa0\xcd\x2c\x61\x97\xb7\xbc\x51\x51\xb8\x52\x9d\x35\xb6\xf1\x09\x13\xd9\xf4\xac\x27\xa3\xf7\x6d\xf1\xb6\xf8\x7f\x00\x00\x00\xff\xff\x88\xea\x77\xe5\x18\x14\x00\x00")

func cssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_cssIndexCss,
		"css/index.css",
	)
}

func cssIndexCss() (*asset, error) {
	bytes, err := cssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/index.css", size: 5144, mode: os.FileMode(420), modTime: time.Unix(1573974346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x5f\x6b\xdb\x30\x14\xc5\xdf\xf5\x29\xce\x9b\xe5\x74\xb8\x7d\xef\x52\x68\x4b\x1f\x06\x1b\x8c\xe5\xb1\x14\xe2\xca\xd7\xf6\x25\xf2\x55\x26\x5d\x27\x84\xd1\xef\x3e\x2c\xbb\xeb\x56\x32\xfa\x20\x30\xf8\x77\x74\xfe\xe8\x72\xb5\x32\x58\x61\x43\x3a\xee\x2b\x83\xd5\xa5\x31\x2e\x48\x52\xb0\xd2\x90\xb0\x46\x13\xdc\x38\x90\x68\xf5\x73\xa4\x78\xda\x90\x27\xa7\x21\xde\x7a\x6f\x8b\xea\x7b\xdd\x51\x51\x2e\x02\xcf\xb2\xfb\x48\xf0\x8d\x64\x44\x5d\x94\xc6\x2c\xbe\xf7\x3d\xb9\x1d\xb8\xc5\x96\xfc\x16\x9c\x10\x46\x9d\x4f\x8b\x03\xd3\x71\x89\xd4\x8e\xe2\x94\x83\x80\xd3\x1d\xf9\x70\xdc\xb8\x18\xbc\xb7\xe4\x4b\xfc\x32\x40\x24\x1d\xa3\x80\x7c\xd5\x91\xde\x85\x51\x1a\x96\xee\xde\x33\x89\xfe\x20\xa7\xb6\xac\x9e\x83\x6a\x18\x70\x83\x2b\xf3\xf2\xc7\xfc\xd6\x29\x1f\x6a\xa5\xdc\x15\x5b\xde\xbe\x77\xab\x17\xe0\x8b\xd2\x60\x79\xf6\xca\x35\xab\x36\xc4\x87\xda\xf5\x96\xb0\xbe\x01\x55\xce\xd7\x29\x7d\xe5\xa4\x55\xa4\x21\x1c\xc8\x16\x59\x4a\x45\x59\xbe\x4a\x1e\xf9\xe9\x2f\xac\x6e\x9a\x37\xe6\x5c\x24\xed\x09\x2e\xc4\x48\x4e\x31\x4c\xab\xe5\x8c\x6d\x88\xd3\x9f\x89\x74\x41\x94\x44\x13\x58\x32\x3c\xad\xb5\x0f\x51\xff\xd7\xc1\x2e\xf1\x49\xc1\x58\xe3\xca\x18\xe4\xeb\xec\x35\x18\x9f\xe7\xe7\xae\x3c\x49\xa7\xfd\x35\xf8\xe2\x62\xc6\x31\xbd\x8d\xfd\x77\xf5\x8c\x3e\xf2\x53\xf9\x8a\x00\xcf\x91\xea\x5d\xfe\x7e\x31\xd3\x31\x78\xbf\xdd\xb9\x8e\x29\xdf\x87\xb4\x3f\x41\x7b\x96\xee\xb4\x64\x3f\xb2\x34\xe1\x38\x6d\xf4\x70\x20\xd1\x69\x30\x12\x8a\xb6\x98\x05\xc5\x27\xe4\xd9\xdf\x9a\x95\xe6\x77\x00\x00\x00\xff\xff\x00\x4d\x68\x65\xc7\x02\x00\x00")

func jsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_jsIndexJs,
		"js/index.js",
	)
}

func jsIndexJs() (*asset, error) {
	bytes, err := jsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/index.js", size: 711, mode: os.FileMode(420), modTime: time.Unix(1573974346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x41\x8f\xdb\x2c\x10\xbd\x7f\xbf\x62\x3e\x7a\xad\x6d\xe5\xd6\x03\xe4\x92\xb6\xea\xa5\xea\x4a\xbb\x52\xd5\x23\x81\xd9\x98\x2d\xc6\xae\x19\x27\x59\x51\xff\xf7\xca\x21\xa9\x00\x47\xdd\x93\x07\xbd\x37\xc3\x7b\x0f\x30\xff\xff\xe3\xb7\xdd\xd3\x8f\x87\x4f\xd0\x52\x67\xb7\xff\xf1\xf8\x01\xe0\x2d\x4a\xbd\x14\x00\xbc\x43\x92\xa0\x5a\x39\x7a\x24\xc1\x26\x7a\xae\x3e\xb0\x14\x6a\x89\x86\x0a\x7f\x4d\xe6\x28\xd8\xb9\x9a\x64\xa5\xfa\x6e\x90\x64\xf6\x16\x19\xa8\xde\x11\x3a\x12\xcc\xa0\x40\x7d\xc0\xac\xd3\xc9\x0e\x05\x3b\x1a\x3c\x0d\xfd\x48\x09\xf9\x64\x34\xb5\x42\xe3\xd1\x28\xac\x2e\x8b\xf7\x60\x9c\x21\x23\x6d\xe5\x95\xb4\x28\x36\xb7\x41\x64\xc8\xe2\x36\x84\xfa\x69\x29\xe6\x19\x7e\x43\x08\xf5\xe3\xb4\xa7\xb8\xe6\x4d\x64\x44\xb6\x35\xee\x27\x8c\x68\x05\xf3\xf4\x6a\xd1\xb7\x88\xc4\xa0\x1d\xf1\x59\x30\x6a\xb1\xc3\x46\x0e\x78\x6e\x94\xf7\x8d\x71\x1a\xcf\xb5\xf2\xfe\xb2\x13\x6f\x6e\x89\xf0\x7d\xaf\x5f\xaf\xe3\xb4\x39\x82\xb2\xd2\x7b\xc1\xbe\x8f\x72\x18\x70\xbc\xca\xca\xb1\x5d\xef\x48\x1a\x97\xa0\x39\xfe\x05\xa5\xce\xc0\x1c\xbe\x38\x03\x85\x8e\x0a\x12\x00\xf7\x83\x74\x37\x1e\xe1\x99\x58\x12\x05\x6f\x16\xf4\x1f\x0d\x7e\xda\xff\xed\x49\x13\x2b\xdb\x78\xa3\xcd\x31\x91\x1e\x97\x77\xad\xec\xe2\x11\x56\xa7\x22\x8e\x92\xf7\x68\x34\xee\xe5\xca\x4e\xc2\xf8\x8a\x6e\x2a\x60\x80\x10\x46\xe9\x0e\x08\xf5\x83\x3c\xa0\x9f\xe7\x02\xce\x27\x18\xc2\x6e\x35\xe1\x42\x92\xd7\x23\x7f\xb7\x18\xb7\xd3\x61\x9e\xf3\xdc\xe4\xba\xab\xc8\xe0\x26\x07\x9d\x2e\x54\xac\x88\x65\x5c\x77\x03\x2b\x74\xbe\xe1\x33\x1d\xb0\x30\x18\x18\x2d\x58\x62\x66\x2d\xbf\xdd\x64\x0e\xdb\xcd\x9a\x13\x42\x7d\x55\xb3\xde\x70\xed\xfe\xae\xf7\x44\xd7\xe7\xbe\xbf\xdc\xd7\x10\xea\x58\x2e\xdb\xae\xa6\x70\xaf\x46\x33\x10\xf8\x51\x65\x2f\xf0\xe5\xf6\x00\x5f\x3c\xdb\xf2\x26\xb2\xde\xbe\x93\x59\xc9\x9b\xf8\x54\x79\x13\x7f\x6b\x7f\x02\x00\x00\xff\xff\x7c\xad\x6c\x5f\xee\x04\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 1262, mode: os.FileMode(420), modTime: time.Unix(1573974346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/index.css": cssIndexCss,
	"js/index.js": jsIndexJs,
	"views/index.html": viewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"index.css": &bintree{cssIndexCss, map[string]*bintree{}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"index.js": &bintree{jsIndexJs, map[string]*bintree{}},
	}},
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

